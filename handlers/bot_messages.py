from aiogram.types import Message
from aiogram import Router
from data import DataBase
from keyboards import fabrics, inline

router = Router()


@router.message()
async def echo(message: Message):
    msg = message.text.lower()
    print(msg)
    user_id = message.from_user.id
    role = DataBase.get_user_role(user_id)
    print(role)
    # res = DataBase.update_favorite_tracks(user_id)
    list_favorite_tracks_user_tuple = DataBase.get_list_select_user_favorite_tracks(user_id)
    list_title_tracks_likes = [[track['title'], track['artist']] for track in list_favorite_tracks_user_tuple]
    # login = DataBase.get_user_login(user_id)

    if msg == '–º–æ–∏ –ª–∞–π–∫–∏' and (role == 1 or role == 2):
        if(len(list_title_tracks_likes)== 0):
            DataBase.update_favorite_tracks(message.from_user.id)
        print(user_id, role)
        await message.answer("–í–æ—Ç 10 —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ, "
                             "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Ç—Ä–µ–ª–∫–∞–º–∏.\nüíø–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1:\n",
                             reply_markup=fabrics.paginator_likes(0, list_title_tracks_likes))
    elif msg == '–º–æ–∏ –ª–∞–π–∫–∏' and role == 3:
        await message.answer("üò¢–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤. –ß—Ç–æ–±—ã –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω.\n/start")
    elif msg == "–º–æ–∏ –∞–ª—å–±–æ–º—ã" and (role == 1 or role == 2):
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –ø–æ–¥–≥—Ä—É–∂–∞—é –∞–ª—å–±–æ–º—ã –∏–∑ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.üí§\n")
        res = DataBase.list_album_update(message.from_user.id)

        list_album_tuple =  DataBase.get_list_albums(message.from_user.id)
        list_album = [[album['title'], album['artist']] for album in list_album_tuple]
        # print(list_album)
        await message.answer("–í–æ—Ç –∞–ª—å–±–æ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ, "
                             "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Ç—Ä–µ–ª–∫–∞–º–∏.\nüíΩ–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1:\n", reply_markup=fabrics.paginator_albums(0, list_album))
    elif msg == '—á–∞—Ä—Ç':
        res = DataBase.update_chart_list()

        await message.answer('–í–æ—Ç 10 —Ç—Ä–µ–∫–æ–≤ —á–∞—Ä—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ, '
                             '–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Ç—Ä–µ–ª–∫–∞–º–∏.\nüóíÔ∏èüèÜ–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1:\n',
                             reply_markup=fabrics.paginator_chart())
    elif msg == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏' and role == 1:
        await message.answer(
            "–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –±–∏—Ç—Ä–µ–π—Çüéµ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∏–∂–µ.",
            reply_markup=inline.admin)

    elif msg == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏' and role == 2:
        await message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–µ–Ω—è—Ç—å –±–∏—Ç—Ä–µ–π—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞üéµ.\n–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∏–∂–µ.", reply_markup=inline.bitrate)


    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.")
